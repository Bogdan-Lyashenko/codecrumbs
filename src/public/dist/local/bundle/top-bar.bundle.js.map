{"version":3,"sources":["webpack://codecrumbs/./js/components/topBar/subPanel/SubPanelContainer.scss","webpack://codecrumbs/./js/components/topBar/controls/Copy/index.js","webpack://codecrumbs/./js/components/topBar/subPanel/SubPanelContainer.js","webpack://codecrumbs/./js/components/topBar/subPanel/SubPanelContainer.scss?e962"],"names":["Copy","copyText","copy","SubPanelContainer","selectedNode","pathParts","path","split","lastNode","type","FILE_NODE_TYPE","pop","map","part","i","console","log","slice","join","mapStateToProps","state","props","getSourceUserChoice","connect"],"mappings":";;;;;;;;;AAAA,2BAA2B,mBAAO,CAAC,gHAA2D;AAC9F;;;AAGA;AACA,cAAc,QAAS,uBAAuB,mBAAmB,kCAAkC,kBAAkB,EAAE,eAAe,qBAAqB,EAAE;;AAE7J;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AAEO,IAAMA,IAAI,GAAG,SAAPA,IAAO;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,SAClB;AAAG,QAAI,EAAC,GAAR;AAAY,WAAO,EAAE;AAAA,aAAMC,6DAAI,CAACD,QAAD,CAAV;AAAA,KAArB;AAA2C,SAAK,EAAE;AAAlD,KACE;AAAM,QAAI,EAAC,MAAX;AAAkB,SAAK,EAAC;AAAxB,IADF,CADkB;AAAA,CAAb,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJP;AACA;AAGA;AACA;AACA;AAEA;;AAEA,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,OAAsB;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;AAC9C,MAAI,CAACA,YAAL,EACE,OACE;AAAK,aAAS,EAAC;AAAf,KACE,6HACE,sHAAY,IAAZ,QACE;AAAM,QAAI,EAAC;AAAX,IADF,CADF,EAIE,sHAAY,IAAZ,YAJF,CADF,CADF;AAWF,MAAMC,SAAS,GAAGD,YAAY,CAACE,IAAb,CAAkBC,KAAlB,CAAwB,GAAxB,CAAlB;AACA,MAAMC,QAAQ,GAAGJ,YAAY,CAACK,IAAb,KAAsBC,mEAAtB,GAAuCL,SAAS,CAACM,GAAV,EAAvC,GAAyD,IAA1E,CAd8C,CAgB9C;;AACA,SACE;AAAK,aAAS,EAAC;AAAf,KACE,6HACE,sHAAY,IAAZ,QACE;AAAM,QAAI,EAAC;AAAX,IADF,CADF,EAIGN,SAAS,CAACO,GAAV,CAAc,UAACC,IAAD,EAAOC,CAAP;AAAA,WACb,sHAAY,IAAZ;AAAiB,SAAG,EAAED,IAAI,GAAGC;AAA7B,OACE;AACE,UAAI,EAAC,GADP;AAEE,aAAO,EAAE;AAAA,eAAMC,OAAO,CAACC,GAAR,wBAA4BX,SAAS,CAACY,KAAV,CAAgB,CAAhB,EAAmBH,CAAnB,EAAsBI,IAAtB,CAA2B,GAA3B,CAA5B,EAAN;AAAA;AAFX,OAIGL,IAJH,CADF,CADa;AAAA,GAAd,CAJH,EAcGL,QAAQ,IAAI,sHAAY,IAAZ,QAAkBA,QAAlB,CAdf,CADF,EAiBE;AAAK,aAAS,EAAE;AAAhB,KACE,2DAAC,0EAAD;AAAM,YAAQ,EAAEJ,YAAY,CAACE;AAA7B,IADF,CAjBF,CADF;AAuBD,CAxCD;;AA0CA,IAAMa,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,KAAR,EAAkB;AAAA,6BACfC,kFAAmB,CAACF,KAAD,EAAQC,KAAR,CADJ;AAAA,MAChCjB,YADgC,wBAChCA,YADgC;;AAGxC,SAAO;AACLA,gBAAY,EAAZA;AADK,GAAP;AAGD,CAND;;AAQemB,0HAAO,CAACJ,eAAD,CAAP,CAAyBhB,iBAAzB,CAAf,E;;;;;;;;;;;;AC3DA,cAAc,mBAAO,CAAC,gRAAwI;;AAE9J,4CAA4C,QAAS;;AAErD;AACA;;;;AAIA,eAAe;;AAEf;AACA;;AAEA,aAAa,mBAAO,CAAC,sHAA+D;;AAEpF;;AAEA,GAAG,KAAU,EAAE,E","file":"top-bar.bundle.js","sourcesContent":["exports = module.exports = require(\"../../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".SubPanelContainer {\\n  padding: 3px 0;\\n  border-top: 1px solid #ebedf0;\\n  display: flex; }\\n\\n.copyIcon {\\n  margin-left: 5px; }\\n\", \"\"]);\n\n// exports\n","import { Icon } from 'antd';\nimport React from 'react';\nimport copy from 'copy-text-to-clipboard';\n\nexport const Copy = ({ copyText }) => (\n  <a href=\"#\" onClick={() => copy(copyText)} title={'Copy path'}>\n    <Icon type=\"copy\" theme=\"outlined\" />\n  </a>\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Breadcrumb, Icon } from 'antd';\n\nimport { FILE_NODE_TYPE } from 'core/constants/index';\nimport { Copy } from 'components/topBar/controls/Copy/index';\nimport { getSourceUserChoice } from 'core/dataBus/selectors';\n\nimport './SubPanelContainer.scss';\n\nconst SubPanelContainer = ({ selectedNode }) => {\n  if (!selectedNode)\n    return (\n      <div className=\"SubPanelContainer\">\n        <Breadcrumb>\n          <Breadcrumb.Item>\n            <Icon type=\"home\" />\n          </Breadcrumb.Item>\n          <Breadcrumb.Item> </Breadcrumb.Item>\n        </Breadcrumb>\n      </div>\n    );\n\n  const pathParts = selectedNode.path.split('/');\n  const lastNode = selectedNode.type === FILE_NODE_TYPE ? pathParts.pop() : null;\n\n  // TODO: close folder on click\n  return (\n    <div className=\"SubPanelContainer\">\n      <Breadcrumb>\n        <Breadcrumb.Item>\n          <Icon type=\"home\" />\n        </Breadcrumb.Item>\n        {pathParts.map((part, i) => (\n          <Breadcrumb.Item key={part + i}>\n            <a\n              href=\"#\"\n              onClick={() => console.log(`close folder ${pathParts.slice(0, i).join('/')}`)}\n            >\n              {part}\n            </a>\n          </Breadcrumb.Item>\n        ))}\n        {lastNode && <Breadcrumb.Item>{lastNode}</Breadcrumb.Item>}\n      </Breadcrumb>\n      <div className={'copyIcon'}>\n        <Copy copyText={selectedNode.path} />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state, props) => {\n  const { selectedNode } = getSourceUserChoice(state, props);\n\n  return {\n    selectedNode\n  };\n};\n\nexport default connect(mapStateToProps)(SubPanelContainer);\n","\nvar content = require(\"!!../../../../../../node_modules/css-loader/index.js!../../../../../../node_modules/sass-loader/lib/loader.js!./SubPanelContainer.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../../node_modules/css-loader/index.js!../../../../../../node_modules/sass-loader/lib/loader.js!./SubPanelContainer.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../../../node_modules/css-loader/index.js!../../../../../../node_modules/sass-loader/lib/loader.js!./SubPanelContainer.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}"],"sourceRoot":""}